package BRP.service;

import BRP.data.*;
import BRP.model.BookManager;
import BRP.model.MemberCardManager;
import BRP.model.PayOrderManager;
import net.sf.json.JSONObject;
import strosoft.app.data.DataEntity;
import strosoft.app.service.AddServiceHandler;
import strosoft.app.service.ServiceContext;
import strosoft.app.service.ServiceHandler;
import strosoft.app.service.UpdateServiceHandler;
import strosoft.app.util.DateHelper;
import strosoft.app.util.JsonHelper;
import strosoft.app.util.StringHelper;

import javax.servlet.http.HttpServletRequest;
import java.text.SimpleDateFormat;
import java.util.Date;

public class UpdateBookDamageServiceHandler extends UpdateServiceHandler {

    protected DataEntity processDataEntity(ServiceContext updateServiceContext, DataEntity newDataEntity)
            throws Exception {
        HttpServletRequest request = updateServiceContext.getRequest();
        JSONObject jData = this.getRequestData(request);
        Integer companyId = JsonHelper.getInt(jData, "companyId");
        BookDamage newBookDamage = (BookDamage) newDataEntity;
        newBookDamage.setDamageTime(DateHelper.getCurrentTimestamp());
        Book theBook = BookManager.getInstance().getEntity(updateServiceContext.session, newBookDamage.getBookId());
        if (newBookDamage.getIsOff() == null || !newBookDamage.getIsOff()) {
            theBook.setBookStatusCode(BookStatusCodes.On);
            theBook.setIsAvailable(true);
        }
        theBook.setIsDamaged(true);
        BookManager.getInstance().update(updateServiceContext.session, theBook);
        if (newBookDamage.getIsCompensation() != null && newBookDamage.getIsCompensation()) {
            newBookDamage.setPaymentTime(DateHelper.getCurrentTimestamp());
            //添加pay_order账单
            PayOrder newPayOrder = new PayOrder();
            newPayOrder.setCompanyId(companyId);
            newPayOrder.setAmount(newBookDamage.getAmount());
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
            newPayOrder.setMemberId(newBookDamage.getMemberId());
            Date now = new Date();
            String payOrderNo = sdf.format(now);
            newPayOrder.setPayOrderNo(payOrderNo);
            newPayOrder.setBusinessDate(DateHelper.getCurrentTimestamp());
            newPayOrder.setPaymentItemCode("BookDamageCompensate");
            newPayOrder.setPayTime(DateHelper.getCurrentTimestamp());
            newPayOrder.setOperatorId(newBookDamage.getCompanyUserId());
            newPayOrder.setBookId(newBookDamage.getBookId());
            newPayOrder.setPaymentMethodCode(newBookDamage.getPaymentMethodCode());
            newPayOrder.setIsFinished(true);
            newPayOrder.setIsPaid(true);
            PayOrderManager.getInstance().add(updateServiceContext.session, newPayOrder);
        }
        return newBookDamage;
    }
}
