package strosoft.sys.service;

import net.sf.json.JSONObject;
import org.apache.commons.fileupload.FileItem;
import org.jcodec.api.JCodecException;
import strosoft.app.common.SysConfig;
import strosoft.app.common.UploadHelper;
import strosoft.app.service.ServiceHandler;
import strosoft.app.util.*;
import strosoft.sys.data.SysUploadFile;
import strosoft.sys.model.SysUploadFileManager;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URLDecoder;
import java.sql.SQLException;
import java.util.UUID;

/**
 * 上传文件服务处理类
 *
 * @author Admin
 */
public class UploadFileServiceHandler extends ServiceHandler {
    @Override
    public void process(HttpServletRequest request, HttpServletResponse response) throws SQLException,
            ClassNotFoundException, IOException, InstantiationException, IllegalAccessException, Exception {
        FileItem theFileItem = UploadHelper.getFileItem(request);
        if (theFileItem != null) {// 普通文件上传
            this.uploadNormalFile(request, response, theFileItem);
        } else {
            // Base64文件上传
            this.uploadBase64File(request, response);
        }
    }

    private void uploadNormalFile(HttpServletRequest request, HttpServletResponse response, FileItem theFileItem) throws Exception {
        try {
            SysUploadFile newSysUploadFile = new SysUploadFile();
            // 文件名
            String fileName = URLDecoder.decode(theFileItem.getName(), "UTF-8");
            String requestFileName = request.getParameter("fileName");
            if (!StringHelper.isNullOrEmpty(requestFileName)) {
                newSysUploadFile.setName(requestFileName);
            } else {
                newSysUploadFile.setName(fileName);
            }
            // 文件路径
            String filePath = UploadHelper.uploadFile(theFileItem);
            newSysUploadFile.setPath(filePath);
            // 创建时间
            newSysUploadFile.setCreateTime(DateHelper.getCurrentTimestamp());
            // 如果文件是图片，则生成缩略图
            this.processSmallImage(request, newSysUploadFile, fileName);
            // 添加图片时间
            String strIsAddTime = request.getParameter("addTime");
            if (!StringHelper.isNullOrEmpty(strIsAddTime)) {
                Boolean isAddTime = Boolean.valueOf(strIsAddTime);
                if (isAddTime) {
                    this.processTimeImage(request, newSysUploadFile, fileName);
                }
            }
            //提取视频第一帧
            this.processVideoImage(request, newSysUploadFile, fileName);
            // 创建时间
            newSysUploadFile.setCreateTime(DateHelper.getCurrentTimestamp());
            SysUploadFileManager.getInstance().add(newSysUploadFile);
            this.writeSuccessResponse(response, newSysUploadFile);
        } catch (Exception ex) {
            ex.printStackTrace();
            this.writeErrorResponse(response, ex.getStackTrace().toString());
        }
    }

    /**
     * 上传Base64文件
     *
     * @param request
     * @param response
     * @throws IOException
     */
    private void uploadBase64File(HttpServletRequest request, HttpServletResponse response) throws Exception {
        try {
            String data = request.getParameter("data");
            JSONObject jData = JSONObject.fromObject(data);
            SysUploadFile newSysUploadFile = new SysUploadFile();
            // 文件名
            String fileName = JsonHelper.getString(jData, "fileName");
            newSysUploadFile.setName(fileName);
            // 文件路径
            String strFileData = JsonHelper.getString(jData, "fileData");
            String filePath = UploadHelper.uploadBase64File(strFileData, fileName);
            newSysUploadFile.setPath(filePath);
            // 创建时间
            newSysUploadFile.setCreateTime(DateHelper.getCurrentTimestamp());
            SysUploadFileManager.getInstance().add(newSysUploadFile);
            this.writeSuccessResponse(response, newSysUploadFile);
        } catch (Exception ex) {
            this.writeErrorResponse(response, ex.getStackTrace().toString());
        }
    }


    /**
     * 处理图片添加时间
     *
     * @param request
     * @param newSysUploadFile
     * @param fileName
     * @throws IOException
     */
    private void processTimeImage(HttpServletRequest request, SysUploadFile newSysUploadFile, String fileName) throws IOException {
        Boolean isImage = ImageHelper.isImage(fileName);
        if (!isImage) {
            return;
        }
        String timeImageFilePath = SysConfig.getUploadDirectory() + "/" + UUID.randomUUID().toString()
                + FileHelper.getFileExtention(fileName);
        newSysUploadFile.setTimeImageFilePath(timeImageFilePath);
        String sourceFilePath = SysConfig.getResourceDirectoryPath() + "/" + newSysUploadFile.getPath();
        String targetFilePath = SysConfig.getResourceDirectoryPath() + "/" + newSysUploadFile.getTimeImageFilePath();
        ImageHelper.createSquareTimeImage(sourceFilePath, targetFilePath);
    }

    private void processVideoImage(HttpServletRequest request, SysUploadFile newSysUploadFile, String fileName) throws JCodecException, IOException {
        Boolean isVideo = FileHelper.isVideo(fileName);
        if (!isVideo) {
            return;
        }
        String videoImageFilePath = SysConfig.getUploadDirectory() + "/" + UUID.randomUUID().toString()
                + ".jpg";
        newSysUploadFile.setVideoImageFilePath(videoImageFilePath);
        String sourceFilePath = SysConfig.getResourceDirectoryPath() + "/" + newSysUploadFile.getPath();
        String targetFilePath = SysConfig.getResourceDirectoryPath() + "/" + newSysUploadFile.getVideoImageFilePath();
        VideoFrameExtractor.extract(sourceFilePath, targetFilePath);
    }

    /**
     * 生成缩略图片
     *
     * @param request
     * @param newSysUploadFile
     * @param fileName
     * @throws IOException
     * @throws InterruptedException
     */
    private void processSmallImage(HttpServletRequest request, SysUploadFile newSysUploadFile, String fileName)
            throws IOException, InterruptedException {
        Boolean isImage = ImageHelper.isImage(fileName);
        if (!isImage) {
            return;
        }
        String smallImageFilePath = SysConfig.getUploadDirectory() + "/" + UUID.randomUUID().toString()
                + FileHelper.getFileExtention(fileName);
        newSysUploadFile.setSmallImageFilePath(smallImageFilePath);
        String sourceFilePath = SysConfig.getResourceDirectoryPath() + "/" + newSysUploadFile.getPath();
        String targetFilePath = SysConfig.getResourceDirectoryPath() + "/" + newSysUploadFile.getSmallImageFilePath();
        String strImageWidth = request.getParameter("imageWidth");
        Integer imageWidth = 100;
        if (!StringHelper.isNullOrEmpty(strImageWidth)) {
            imageWidth = Integer.parseInt(strImageWidth);
        }
        // 是否裁剪为正方形
        String strCutSquare = request.getParameter("cutSquare");
        Boolean cutSqure = false;
        if (!StringHelper.isNullOrEmpty(strCutSquare)) {
            cutSqure = Boolean.parseBoolean(strCutSquare);
        }
        if (cutSqure) {
            ImageHelper.cutSquareMiniImage(sourceFilePath, targetFilePath, imageWidth);
        } else {
            ImageHelper.createSquareMiniImage(sourceFilePath, targetFilePath, imageWidth);
        }
    }
}
